/*
 * matrix-java-sdk - Matrix Client SDK for Java
 * Copyright (C) 2017 Kamax Sarl
 *
 * https://www.kamax.io/
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.regex.Pattern

String gitVersion() {
    def versionPattern = Pattern.compile("v(\\d+\\.)?(\\d+\\.)?(\\d+)(-.*)?")
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    exec {
        commandLine = ['git', 'describe', '--tags', '--always', '--dirty']
        standardOutput = out
    }
    def v = out.toString().replace(System.lineSeparator(), '')
    return versionPattern.matcher(v).matches() ? v.substring(1) : v
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.5.2"
}

group = 'io.kamax'
version = '0.0.21-dirty'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "com.jfrog.artifactory"

configurations {
    deployerJars
}

repositories {
    mavenCentral()
    maven {
        url "http://jfrog.prenigma.com/artifactory/matrix-libs"
        credentials {
            username = "admin"
            password = "password"
        }
    }
}

sourceSets {
    testInt {
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}


dependencies {
    compile 'org.slf4j:log4j-over-slf4j:1.7.25'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'commons-io:commons-io:2.6'
    compile 'commons-codec:commons-codec:1.11'
    compile 'com.squareup.okhttp3:okhttp:3.12.0'
    compile 'net.sourceforge.streamsupport:streamsupport:1.7.0'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'net.i2p.crypto:eddsa:0.3.0'

    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.0.0"
    testCompile "com.github.tomakehurst:wiremock:2.8.0"
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.25'

    testIntCompile sourceSets.main.output
    testIntCompile sourceSets.test.output

    testIntCompile configurations.compile
    testIntCompile configurations.testCompile

    testIntRuntime configurations.runtime
    testIntRuntime configurations.testRuntime

    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

uploadArchives {
    gradle.ext.mavenUrl = "http://jfrog.prenigma.com/artifactory/matrix-libs"
    gradle.ext.mavenUser = System.env._MAVEN_USER
    gradle.ext.mavenPassword = System.env._MAVEN_PASS

    doLast {
        println "Published ${project.version} to maven repository ${gradle.mavenUrl} with user ${gradle.mavenUser}"
    }

    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        repository(url: gradle.mavenUrl) {
            authentication(
                    userName: gradle.mavenUser,
                    password: gradle.mavenPassword
//                    privateKey: gradle.mavenPrivateKey
            )
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

spotless {
    format 'misc', {
        target '**/*.gradle', '**/.gitignore'

//        trimTrailingWhitespace()
//        indentWithSpaces()
//        endWithNewline()
    }
    java {
//        eclipse().configFile 'spotless.eclipseformat.xml'
//        removeUnusedImports()
//        importOrderFile 'spotless.importorder'
    }
}

junitPlatform {
    enableStandardTestTask true
}

task testInt(type: Test) {
    description = "Integration tests which require a Homeserver"
    testClassesDir = sourceSets.testInt.output.classesDir
    classpath = sourceSets.testInt.runtimeClasspath
}
